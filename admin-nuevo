<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üëë Panel de Administraci√≥n</title>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        h1 {
            text-align: center;
            color: white;
            margin-bottom: 10px;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .subtitle {
            text-align: center;
            color: rgba(255,255,255,0.9);
            margin-bottom: 30px;
            font-size: 1.1em;
        }

        .admin-panel {
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            margin-bottom: 30px;
        }

        .section-title {
            font-size: 1.5em;
            color: #f5576c;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 3px solid #f5576c;
        }

        .upload-section {
            background: #f9f9f9;
            padding: 25px;
            border-radius: 10px;
            margin-bottom: 30px;
        }

        .info-box {
            background: #fff3cd;
            border-left: 4px solid #ffc107;
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 5px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            font-weight: bold;
            margin-bottom: 8px;
            color: #333;
        }

        input[type="text"],
        input[type="file"] {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 1em;
            transition: border-color 0.3s;
        }

        input[type="text"]:focus,
        input[type="file"]:focus {
            outline: none;
            border-color: #f5576c;
        }

        .btn {
            padding: 12px 30px;
            border: none;
            border-radius: 8px;
            font-size: 1em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-block;
        }

        .btn-primary {
            background: #f5576c;
            color: white;
        }

        .btn-primary:hover {
            background: #d4455a;
            transform: translateY(-2px);
        }

        .btn-success {
            background: #4CAF50;
            color: white;
        }

        .btn-success:hover {
            background: #45a049;
        }

        .btn-danger {
            background: #f44336;
            color: white;
        }

        .btn-danger:hover {
            background: #da190b;
        }

        .btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
        }

        .competitors-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .competitor-card {
            background: #f9f9f9;
            border-radius: 10px;
            padding: 15px;
            box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        }

        .competitor-name {
            font-weight: bold;
            font-size: 1.1em;
            margin-bottom: 10px;
            color: #333;
        }

        .competitor-images {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-bottom: 10px;
        }

        .competitor-images img {
            width: 100%;
            height: 100px;
            object-fit: cover;
            border-radius: 5px;
        }

        .competitor-stats {
            font-size: 0.9em;
            color: #666;
            margin-bottom: 10px;
        }

        .btn-delete {
            width: 100%;
            padding: 8px;
            background: #f44336;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9em;
        }

        .btn-delete:hover {
            background: #da190b;
        }

        .leaderboard {
            margin-top: 30px;
        }

        .leaderboard-item {
            background: white;
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            gap: 15px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .rank {
            font-size: 2em;
            font-weight: bold;
            color: #f5576c;
            min-width: 50px;
        }

        .leaderboard-info {
            flex-grow: 1;
        }

        .leaderboard-name {
            font-weight: bold;
            font-size: 1.2em;
        }

        .leaderboard-votes {
            color: #666;
        }

        .actions-section {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-top: 30px;
        }

        .action-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        }

        .warning-box {
            background: #ffebee;
            border-left: 4px solid #f44336;
            padding: 15px;
            margin: 15px 0;
            border-radius: 5px;
        }

        .back-link {
            text-align: center;
            margin-top: 30px;
        }

        .back-link a {
            display: inline-block;
            padding: 15px 30px;
            background: white;
            color: #f5576c;
            text-decoration: none;
            border-radius: 25px;
            font-weight: bold;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
        }

        .back-link a:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.3);
        }

        .loading {
            text-align: center;
            padding: 20px;
            color: #666;
        }

        .toast {
            position: fixed;
            bottom: 30px;
            right: 30px;
            background: #4CAF50;
            color: white;
            padding: 15px 25px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            display: none;
            z-index: 1000;
        }

        .toast.show {
            display: block;
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from {
                transform: translateX(400px);
            }
            to {
                transform: translateX(0);
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üëë Panel de Administraci√≥n</h1>
        <p class="subtitle">Gestiona las im√°genes y observa los resultados</p>

        <!-- Secci√≥n de Subida -->
        <div class="admin-panel">
            <h2 class="section-title">üì§ Subir Im√°genes</h2>
            
            <div class="info-box">
                <strong>üìù Instrucciones:</strong><br>
                ‚Ä¢ Sube UNA imagen que termine en -1 o -2 (ej: maria-1.jpg o maria-2.jpg)<br>
                ‚Ä¢ La app autom√°ticamente emparejar√° las im√°genes cuando ambas est√©n subidas
            </div>

            <div class="upload-section">
                <div class="form-group">
                    <label for="personName">Nombre de la persona:</label>
                    <input type="text" id="personName" placeholder="Ej: Maria, Juan, Pedro...">
                </div>

                <div class="form-group">
                    <label for="imageFile">Sube solo UNA imagen (-1 o -2):</label>
                    <input type="file" id="imageFile" accept="image/*">
                </div>

                <button class="btn btn-primary" onclick="uploadImage()" id="uploadBtn">
                    üì§ Subir Imagen
                </button>
            </div>

            <div id="competitorsList">
                <h3>Competencias actuales:</h3>
                <div class="competitors-grid" id="competitorsGrid"></div>
            </div>
        </div>

        <!-- Secci√≥n de Resultados -->
        <div class="admin-panel">
            <h2 class="section-title">üèÜ Tabla de Posiciones</h2>
            <p style="color: #666; margin-bottom: 15px;">Las 8 personas con mayor n√∫mero de votos</p>
            <div id="leaderboard" class="leaderboard"></div>
        </div>

        <!-- Secci√≥n de Acciones -->
        <div class="admin-panel">
            <h2 class="section-title">‚öôÔ∏è Acciones</h2>
            <p style="color: #666; margin-bottom: 20px;">Exportar datos y gestionar el concurso</p>
            
            <div class="actions-section">
                <div class="action-card">
                    <h3>üìä Exportar a Excel</h3>
                    <p style="color: #666; margin: 15px 0;">Descarga todos los datos del concurso actual en formato Excel.</p>
                    <p style="color: #666; font-size: 0.9em; margin-bottom: 15px;">Incluye: nombres, fotos, votos, competencias y estad√≠sticas completas.</p>
                    <button class="btn btn-success" onclick="exportToExcel()">
                        üì• Descargar Excel
                    </button>
                </div>

                <div class="action-card">
                    <h3>üóëÔ∏è Borrar Todo</h3>
                    <div class="warning-box">
                        <strong>‚ö†Ô∏è ATENCI√ìN:</strong> Esta acci√≥n eliminar√° permanentemente:<br>
                        ‚Ä¢ Todas las im√°genes subidas<br>
                        ‚Ä¢ Todos los votos registrados<br>
                        ‚Ä¢ Todos los nombres de personas<br>
                        ‚Ä¢ Todas las competencias creadas
                    </div>
                    <p style="color: #666; font-size: 0.9em; margin-bottom: 15px;">üí° RECOMENDACI√ìN: Exporta los datos a Excel antes de borrar</p>
                    <button class="btn btn-danger" onclick="confirmDeleteAll()">
                        üóëÔ∏è Borrar Todo
                    </button>
                </div>
            </div>
        </div>

        <div class="back-link">
            <a href="index.html">‚Üê Volver a la Votaci√≥n</a>
        </div>
    </div>

    <div id="toast" class="toast"></div>

    <script>
        // Configuraci√≥n de Supabase
        const SUPABASE_URL = 'https://dfxzwodoshldrucupqqa.supabase.co';
        const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRmeHp3b2Rvc2hsZHJ1Y3VwcXFhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk0MjYwNzUsImV4cCI6MjA3NTAwMjA3NX0.wMgKkTX50pwPCB6N7iNQYsadF4pQJLREb7xGzwYBqkI';
        
        const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_KEY);

        // Cargar datos
        async function loadData() {
            await loadCompetitors();
            await loadLeaderboard();
        }

        // Cargar competidores
        async function loadCompetitors() {
            const grid = document.getElementById('competitorsGrid');
            grid.innerHTML = '<div class="loading">Cargando...</div>';

            try {
                const { data, error } = await supabase
                    .from('persons')
                    .select('*')
                    .order('name');

                if (error) throw error;

                if (!data || data.length === 0) {
                    grid.innerHTML = '<p style="color: #666;">No hay competencias a√∫n. Sube la primera imagen.</p>';
                    return;
                }

                grid.innerHTML = '';
                data.forEach(person => {
                    const card = document.createElement('div');
                    card.className = 'competitor-card';
                    
                    const votes = person.votes || 0;
                    
                    card.innerHTML = `
                        <div class="competitor-name">${person.name}</div>
                        <div class="competitor-images">
                            ${person.image1_url ? `<img src="${person.image1_url}" alt="Imagen 1">` : '<div style="background: #ddd; height: 100px; display: flex; align-items: center; justify-content: center; border-radius: 5px;">Sin imagen 1</div>'}
                            ${person.image2_url ? `<img src="${person.image2_url}" alt="Imagen 2">` : '<div style="background: #ddd; height: 100px; display: flex; align-items: center; justify-content: center; border-radius: 5px;">Sin imagen 2</div>'}
                        </div>
                        <div class="competitor-stats">
                            Total de votos: <strong>${votes}</strong>
                        </div>
                        <button class="btn-delete" onclick="deletePerson('${person.id}', '${person.name}')">
                            üóëÔ∏è Eliminar
                        </button>
                    `;
                    
                    grid.appendChild(card);
                });
            } catch (error) {
                console.error('Error cargando competidores:', error);
                grid.innerHTML = '<p style="color: red;">Error al cargar los datos.</p>';
            }
        }

        // Cargar tabla de posiciones
        async function loadLeaderboard() {
            const leaderboard = document.getElementById('leaderboard');
            leaderboard.innerHTML = '<div class="loading">Cargando tabla de posiciones...</div>';

            try {
                // Obtener todos los votos
                const { data: votes, error: votesError } = await supabase
                    .from('votes')
                    .select('person_id, image_number');

                if (votesError) throw votesError;

                // Obtener todas las personas
                const { data: persons, error: personsError } = await supabase
                    .from('persons')
                    .select('*');

                if (personsError) throw personsError;

                // Contar votos por persona
                const voteCounts = {};
                votes.forEach(vote => {
                    voteCounts[vote.person_id] = (voteCounts[vote.person_id] || 0) + 1;
                });

                // Combinar datos y ordenar
                const leaderboardData = persons
                    .map(person => ({
                        ...person,
                        totalVotes: voteCounts[person.id] || 0
                    }))
                    .sort((a, b) => b.totalVotes - a.totalVotes)
                    .slice(0, 8);

                if (leaderboardData.length === 0) {
                    leaderboard.innerHTML = '<p style="color: #666; text-align: center;">No hay votos registrados a√∫n.</p>';
                    return;
                }

                leaderboard.innerHTML = '';
                leaderboardData.forEach((person, index) => {
                    const item = document.createElement('div');
                    item.className = 'leaderboard-item';
                    
                    const medals = ['ü•á', 'ü•à', 'ü•â'];
                    const rank = index < 3 ? medals[index] : `#${index + 1}`;
                    
                    item.innerHTML = `
                        <div class="rank">${rank}</div>
                        <div class="leaderboard-info">
                            <div class="leaderboard-name">${person.name}</div>
                            <div class="leaderboard-votes">${person.totalVotes} votos totales</div>
                        </div>
                    `;
                    
                    leaderboard.appendChild(item);
                });
            } catch (error) {
                console.error('Error cargando leaderboard:', error);
                leaderboard.innerHTML = '<p style="color: red;">Error al cargar la tabla de posiciones.</p>';
            }
        }

        // Subir imagen
        async function uploadImage() {
            const nameInput = document.getElementById('personName');
            const fileInput = document.getElementById('imageFile');
            const uploadBtn = document.getElementById('uploadBtn');

            const name = nameInput.value.trim();
            const file = fileInput.files[0];

            if (!name) {
                showToast('‚ùå Por favor ingresa un nombre', 'error');
                return;
            }

            if (!file) {
                showToast('‚ùå Por favor selecciona una imagen', 'error');
                return;
            }

            // Validar que el nombre termine en -1 o -2
            const fileName = file.name.toLowerCase();
            const imageNumber = fileName.includes('-1.') ? 1 : fileName.includes('-2.') ? 2 : null;

            if (!imageNumber) {
                showToast('‚ùå El nombre de la imagen debe terminar en -1 o -2 (ej: maria-1.jpg)', 'error');
                return;
            }

            uploadBtn.disabled = true;
            uploadBtn.textContent = '‚è≥ Subiendo...';

            try {
                // Crear nombre √∫nico para el archivo
                const timestamp = Date.now();
                const fileExt = file.name.split('.').pop();
                const filePath = `${name.toLowerCase()}-${imageNumber}-${timestamp}.${fileExt}`;

                // Subir imagen a Storage
                const { data: uploadData, error: uploadError } = await supabase.storage
                    .from('images')
                    .upload(filePath, file);

                if (uploadError) throw uploadError;

                // Obtener URL p√∫blica
                const { data: urlData } = supabase.storage
                    .from('images')
                    .getPublicUrl(filePath);

                const imageUrl = urlData.publicUrl;

                // Buscar si ya existe la persona
                const { data: existingPerson, error: searchError } = await supabase
                    .from('persons')
                    .select('*')
                    .eq('name', name)
                    .single();

                if (searchError && searchError.code !== 'PGRST116') throw searchError;

                if (existingPerson) {
                    // Actualizar persona existente
                    const updateField = imageNumber === 1 ? 'image1_url' : 'image2_url';
                    const { error: updateError } = await supabase
                        .from('persons')
                        .update({ [updateField]: imageUrl })
                        .eq('id', existingPerson.id);

                    if (updateError) throw updateError;
                } else {
                    // Crear nueva persona
                    const newPerson = {
                        name: name,
                        image1_url: imageNumber === 1 ? imageUrl : null,
                        image2_url: imageNumber === 2 ? imageUrl : null
                    };

                    const { error: insertError } = await supabase
                        .from('persons')
                        .insert([newPerson]);

                    if (insertError) throw insertError;
                }

                showToast('‚úÖ Imagen subida exitosamente');
                nameInput.value = '';
                fileInput.value = '';
                loadData();
            } catch (error) {
                console.error('Error subiendo imagen:', error);
                showToast('‚ùå Error al subir la imagen: ' + error.message, 'error');
            } finally {
                uploadBtn.disabled = false;
                uploadBtn.textContent = 'üì§ Subir Imagen';
            }
        }

        // Eliminar persona
        async function deletePerson(id, name) {
            if (!confirm(`¬øEst√°s seguro de eliminar a ${name} y todos sus votos?`)) {
                return;
            }

            try {
                const { error } = await supabase
                    .from('persons')
                    .delete()
                    .eq('id', id);

                if (error) throw error;

                showToast('‚úÖ Persona eliminada exitosamente');
                loadData();
            } catch (error) {
                console.error('Error eliminando persona:', error);
                showToast('‚ùå Error al eliminar', 'error');
            }
        }

        // Confirmar borrado total
        function confirmDeleteAll() {
            const confirmation = prompt('‚ö†Ô∏è ESTA ACCI√ìN NO SE PUEDE DESHACER\n\nEscribe "BORRAR TODO" para confirmar:');
            
            if (confirmation === 'BORRAR TODO') {
                deleteAll();
            } else if (confirmation !== null) {
                showToast('‚ùå Cancelado. Texto incorrecto.', 'error');
            }
        }

        // Borrar todo
        async function deleteAll() {
            try {
                // Eliminar todas las personas (los votos se eliminan autom√°ticamente por CASCADE)
                const { error } = await supabase
                    .from('persons')
                    .delete()
                    .neq('id', '00000000-0000-0000-0000-000000000000'); // Eliminar todos

                if (error) throw error;

                // Eliminar todas las im√°genes del storage
                const { data: files, error: listError } = await supabase.storage
                    .from('images')
                    .list();

                if (listError) throw listError;

                if (files && files.length > 0) {
                    const filePaths = files.map(file => file.name);
                    const { error: deleteError } = await supabase.storage
                        .from('images')
                        .remove(filePaths);

                    if (deleteError) throw deleteError;
                }

                showToast('‚úÖ Todos los datos han sido eliminados');
                loadData();
            } catch (error) {
                console.error('Error borrando todo:', error);
                showToast('‚ùå Error al borrar los datos', 'error');
            }
        }

        // Exportar a Excel
        async function exportToExcel() {
            try {
                // Obtener todos los datos
                const { data: persons, error: personsError } = await supabase
                    .from('persons')
                    .select('*');

                if (personsError) throw personsError;

                const { data: votes, error: votesError } = await supabase
                    .from('votes')
                    .select('*');

                if (votesError) throw votesError;

                // Preparar datos para Excel
                const excelData = persons.map(person => {
                    const personVotes = votes.filter(v => v.person_id === person.id);
                    const votes1 = personVotes.filter(v => v.image_number === 1).length;
                    const votes2 = personVotes.filter(v => v.image_number === 2).length;
                    
                    return {
                        'Nombre': person.name,
                        'Votos Imagen 1': votes1,
                        'Votos Imagen 2': votes2,
                        'Total Votos': votes1 + votes2,
                        'URL Imagen 1': person.image1_url || '',
                        'URL Imagen 2': person.image2_url || '',
                        'Fecha Creaci√≥n': new Date(person.created_at).toLocaleString('es-MX')
                    };
                });

                // Crear libro de Excel
                const wb = XLSX.utils.book_new();
                const ws = XLSX.utils.json_to_sheet(excelData);
                XLSX.utils.book_append_sheet(wb, ws, 'Resultados');

                // Descargar archivo
                const fileName = `votacion_summit_${new Date().toISOString().split('T')[0]}.xlsx`;
                XLSX.writeFile(wb, fileName);

                showToast('‚úÖ Excel descargado exitosamente');
            } catch (error) {
                console.error('Error exportando a Excel:', error);
                showToast('‚ùå Error al exportar los datos', 'error');
            }
        }

        // Mostrar notificaci√≥n
        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.style.background = type === 'error' ? '#f44336' : '#4CAF50';
            toast.classList.add('show');
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        // Suscribirse a cambios en tiempo real
        supabase
            .channel('admin_persons')
            .on('postgres_changes', { event: '*', schema: 'public', table: 'persons' }, () => {
                loadData();
            })
            .subscribe();

        supabase
            .channel('admin_votes')
            .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'votes' }, () => {
                loadLeaderboard();
            })
            .subscribe();

        // Cargar datos al iniciar
        loadData();
    </script>
</body>
</html>
